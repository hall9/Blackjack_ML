import structure Rand from "x-alice:/lib/system/Rand";

val stdin = TextIO.stdIn
val readLine = TextIO.inputLine

datatype faceType = KING | QUEEN | JACK;
datatype cardType = ACE | FACE of faceType | NONFACE of int;
datatype suitType = SPADSES | HEARTS | DIAMONDS | CLUBS;

type playingCard = cardType * suitType;

val deck = [
(NONFACE 2,SPADSES),(NONFACE 2,HEARTS),(NONFACE 2,DIAMONDS),(NONFACE 2,CLUBS),
(NONFACE 3,SPADSES),(NONFACE 3,HEARTS),(NONFACE 3,DIAMONDS),(NONFACE 3,CLUBS),
(NONFACE 4,SPADSES),(NONFACE 4,HEARTS),(NONFACE 4,DIAMONDS),(NONFACE 4,CLUBS),
(NONFACE 5,SPADSES),(NONFACE 5,HEARTS),(NONFACE 5,DIAMONDS),(NONFACE 5,CLUBS),
(NONFACE 6,SPADSES),(NONFACE 6,HEARTS),(NONFACE 6,DIAMONDS),(NONFACE 6,CLUBS),
(NONFACE 7,SPADSES),(NONFACE 7,HEARTS),(NONFACE 7,DIAMONDS),(NONFACE 7,CLUBS),
(NONFACE 8,SPADSES),(NONFACE 8,HEARTS),(NONFACE 8,DIAMONDS),(NONFACE 8,CLUBS),
(NONFACE 9,SPADSES),(NONFACE 9,HEARTS),(NONFACE 9,DIAMONDS),(NONFACE 9,CLUBS),
(NONFACE 10,SPADSES),(NONFACE 10,HEARTS),(NONFACE 10,DIAMONDS),(NONFACE 10,CLUBS),

(FACE JACK,SPADSES),(FACE JACK,HEARTS),(FACE JACK,DIAMONDS),(FACE JACK,CLUBS),
(FACE QUEEN,SPADSES),(FACE QUEEN,HEARTS),(FACE QUEEN,DIAMONDS),(FACE QUEEN,CLUBS),
(FACE KING,SPADSES),(FACE KING,HEARTS),(FACE KING,DIAMONDS),(FACE KING,CLUBS),

(ACE,SPADSES),(ACE,HEARTS),(ACE,DIAMONDS),(ACE,CLUBS)
];

fun getInput prompt =
    let
   	 val dropEOL = Substring.dropr (fn x => x = #"\n")    
   	 val response = (print(prompt ^ ": "); readLine stdin)
   	 val sansEOL = dropEOL (Substring.full(valOf response))
    in
   	 Substring.string(sansEOL);
    end;

fun shuffle x =
	let
		val random = Rand.rand() mod 52;
		fun cycleList (x,n) =
		let
			fun cycle x = (tl x) @ [(hd x)]
		in
			if n = 0 then x
			else cycleList (cycle(x),(n-1))
		end;
	in
		cycleList(x,random)
	end;

fun dealCard (hand,card) = hand @ [card];

fun discard d = (tl d);

fun suitString suit = case suit of
    SPADSES => "Spades" |
    HEARTS => "Hearts" |
    DIAMONDS => "Diamonds" |
    CLUBS => "Clubs";

fun showCard (ACE, suit) = print ("- ACE of " ^ suitString suit ^ "\n")
	| showCard (FACE face, suit) = (case face of
          KING => print ("- KING of " ^ suitString suit ^ "\n") |
          QUEEN => print ("- QUEEN of " ^ suitString suit ^ "\n") |
          JACK => print ("- JACK of " ^ suitString suit ^ "\n"))
        | showCard (NONFACE nfvalue, suit) = print ("- " ^ (Int.toString nfvalue) ^ " of " ^ suitString suit ^ "\n");

fun getHandValue hand = 
	let
		val l = length hand
				
		fun hasAce (pHand) = 
			let
				fun cycle x = (tl x) @ [(hd x)];
				
				fun cycleList (x,n) =
					if n = 0 then x
					else cycleList (cycle(x),(n-1));
				
				fun isAce (ACE, suit) = true
					| isAce (FACE face, suit) = false
					| isAce (NONFACE value, suit) = false;
						
				fun countAces (pHand) =
					let			
						fun countAce(pHand,ln,n) =
							if ln = 0 then n
							else if (isAce(hd pHand)) then countAce(cycle pHand,ln-1,n+1)
							else countAce(cycle pHand,ln-1,n);
					in
						countAce(pHand,l,0);
					end;
			in
				countAces(pHand);
			end;			
			
		fun getCardValue (ACE, suit) = 11
			| getCardValue (FACE face, suit) = 10
			| getCardValue (NONFACE value, suit) = value;
			
		fun getTotalCount (tHand) = 
			let 
				val ln = length tHand
			in
				if ln = 1 then getCardValue (hd tHand)
				else if ln > 1 then (getTotalCount([(hd tHand)]) + getTotalCount (tl tHand))
				else 0
			end;
		
		fun softAce (aceHand, count) =
			let	
				val numAce = hasAce hand;
				
				fun softenAce (count, aCount) =
					if count < 22 then count
					else (if aCount > 0 then softenAce((count-10),aCount-1)
						else count)
			in
				softenAce(count, numAce);	
			end;
	in
		softAce(hand,getTotalCount(hand));
	end;

fun showHands (h1,h2) =
	let
		val playerCount = getHandValue(h1)
		
		fun showHand hand = 
			let
				val l = length hand
			in
				if l = 1 then showCard(hd hand)
				else (
				showHand([(hd hand)]);
				showHand(tl hand) )
			end;
	in
		print("---> Player's Turn\n\n");
		print("Dealers Cards: \n");
		print("- Hole Card\n");
		showHand(tl h2);
		
		print("\nPlayers Cards: \n");
		showHand(h1);
		print("#Count: " ^ (Int.toString playerCount) ^ "\n");
	end;

fun showEndGame (playersHand,dealerHand,status) = 
	let 
		val playerCount = getHandValue(playersHand);
		val dealerCount = getHandValue(dealerHand);
		
		fun showHand hand = 
			let
				val l = length hand
			in
				if l = 1 then showCard(hd hand)
				else (
				showHand([(hd hand)]);
				showHand(tl hand) )
			end;
	in
		print(" ****************\n");
		print(" ** Game Ended **\n");
		print(" ****************\n");
		print("Dealers Cards: \n");
		showHand(dealerHand);
		print("#Count: " ^ (Int.toString dealerCount) ^ "\n");
		
		print("\nPlayers Cards: \n");
		showHand(playersHand);
		print("#Count: " ^ (Int.toString playerCount) ^ "\n");
		
		print(status ^ "\n");
	end;
		
fun endGame (playersHand,dealerHand) =
	let
		val playerCount = getHandValue(playersHand);
		val dealerCount = getHandValue(dealerHand);
	in
		if playerCount > 21 then showEndGame(playersHand,dealerHand,"BUST! You Lose!")
		else if playerCount = 21 then showEndGame(playersHand,dealerHand,"BlackJack! YOU WIN with 21!")
		else if dealerCount > 21 then showEndGame(playersHand,dealerHand,"YOU WIN, Dealer Bust.")
		else if playerCount > dealerCount then showEndGame(playersHand,dealerHand,"YOU Win! Beat the Dealer.")
		else if playerCount < dealerCount then showEndGame(playersHand,dealerHand,"YOU LOST! Dealer Beat you.")
		else showEndGame(playersHand,dealerHand,"Push (aka Tie)");
	end;

fun dealersTurn (playerHand,dealerHand,sDeck) = 
	let
		val shuffled = shuffle(sDeck);
		val dealerCount = getHandValue(dealerHand);
	in
		if dealerCount < 17 then dealersTurn(playerHand,dealCard(dealerHand,(hd shuffled)),discard(shuffled))
		else endGame(playerHand,dealerHand);
	end;

fun playerTurn (playerHand,dealerHand,sDeck) = 
	let
		val playerCount = getHandValue(playerHand);
		
		fun playerTurns (playerHand,dealerHand,sDeck) =
			let
				val shuffled = shuffle(sDeck);
				val inputString = getInput "Hit(h) or Stay(s)?";
				val printSomeSpace = print ("\n");
			in
				if inputString = "h" then playerTurn(dealCard(playerHand,(hd shuffled)), dealerHand, discard(shuffled))
				else if inputString = "s" then dealersTurn(playerHand,dealerHand, shuffled)
				else ( print("invalid input: " ^ inputString ^ "h - Hit, s - Stay\n"); playerTurn(playerHand,dealerHand,shuffled))
			end;
	in	
		if playerCount < 21 then (showHands(playerHand,dealerHand); playerTurns(playerHand,dealerHand,sDeck))
		else if playerCount > 21 then endGame(playerHand,dealerHand)
		else dealersTurn(playerHand,dealerHand,sDeck);
	
	end;

fun playing w = 
	let		
		val playerHand = []
		val dealerHand = []
		val shuffled = shuffle(deck);		
		val playerHand = dealCard(playerHand,(hd shuffled));
		val shuffled = shuffle(discard(shuffled));
		val dealerHand = dealCard(dealerHand,(hd shuffled));
		val shuffled = shuffle(discard(shuffled));
		val playerHand = dealCard(playerHand,(hd shuffled));
		val shuffled = shuffle(discard(shuffled));
		val dealerHand = dealCard(dealerHand,(hd shuffled));
		val shuffled = shuffle(discard(shuffled));			
	in
		print(" ******************\n");
		print(" ** Game Started **\n");
		print(" ******************\n\n");
		playerTurn(playerHand,dealerHand,shuffled);		
	end;

    
val startPlaying = playing "yes";
	