import structure Rand from "x-alice:/lib/system/Rand";

val stdin = TextIO.stdIn
val readLine = TextIO.inputLine

datatype faceType = KING | QUEEN | JACK;
datatype cardType = ACE | FACE of faceType | NONFACE of int;
datatype suitType = SPADSES | HEARTS | DIAMONDS | CLUBS;

type playingCard = cardType * suitType;

val deck = [
(NONFACE 2,SPADSES),(NONFACE 2,HEARTS),(NONFACE 2,DIAMONDS),(NONFACE 2,CLUBS),
(NONFACE 3,SPADSES),(NONFACE 3,HEARTS),(NONFACE 3,DIAMONDS),(NONFACE 3,CLUBS),
(NONFACE 4,SPADSES),(NONFACE 4,HEARTS),(NONFACE 4,DIAMONDS),(NONFACE 4,CLUBS),
(NONFACE 5,SPADSES),(NONFACE 5,HEARTS),(NONFACE 5,DIAMONDS),(NONFACE 5,CLUBS),
(NONFACE 6,SPADSES),(NONFACE 6,HEARTS),(NONFACE 6,DIAMONDS),(NONFACE 6,CLUBS),
(NONFACE 7,SPADSES),(NONFACE 7,HEARTS),(NONFACE 7,DIAMONDS),(NONFACE 7,CLUBS),
(NONFACE 8,SPADSES),(NONFACE 8,HEARTS),(NONFACE 8,DIAMONDS),(NONFACE 8,CLUBS),
(NONFACE 9,SPADSES),(NONFACE 9,HEARTS),(NONFACE 9,DIAMONDS),(NONFACE 9,CLUBS),

(NONFACE 10,SPADSES),(NONFACE 10,HEARTS),(NONFACE 10,DIAMONDS),(NONFACE 10,CLUBS),
(FACE JACK,SPADSES),(FACE JACK,HEARTS),(FACE JACK,DIAMONDS),(FACE JACK,CLUBS),
(FACE QUEEN,SPADSES),(FACE QUEEN,HEARTS),(FACE QUEEN,DIAMONDS),(FACE QUEEN,CLUBS),
(FACE KING,SPADSES),(FACE KING,HEARTS),(FACE KING,DIAMONDS),(FACE KING,CLUBS),

(ACE,SPADSES),(ACE,HEARTS),(ACE,DIAMONDS),(ACE,CLUBS)
];

fun getInput prompt =
    let
   	 val dropEOL = Substring.dropr (fn x => x = #"\n")    
   	 val response = (print(prompt ^ ": "); readLine stdin)
   	 val sansEOL = dropEOL (Substring.full(valOf response))
    in
   	 Substring.string(sansEOL);
    end;

fun shuffle x =
	let
		val random = Rand.rand() mod 52;
		fun cycleList (x,n) =
		let
			fun cycle x = (tl x) @ [(hd x)]
		in
			if n = 0 then x
			else cycleList (cycle(x),(n-1))
		end;
	in
		cycleList(x,random)
	end;

fun dealCard (hand,card) = hand @ [card];
fun discard d = (tl d);

fun suitString suit = case suit of
    SPADSES => "Spades" |
    HEARTS => "Hearts" |
    DIAMONDS => "Diamonds" |
    CLUBS => "Clubs";

fun showCard (ACE, suit) = print ("ACE of " ^ suitString suit ^ "\n")
	| showCard (FACE face, suit) = (case face of
          KING => print ("KING of " ^ suitString suit ^ "\n") |
          QUEEN => print ("QUEEN of " ^ suitString suit ^ "\n") |
          JACK => print ("JACK of " ^ suitString suit ^ "\n"))
        | showCard (NONFACE nfvalue, suit) = print ("Card value of " ^ (Int.toString nfvalue) ^ " of " ^ suitString suit ^ "\n");

fun getHandValue hand = 
	let
		val l = length hand
		fun getCardValue (ACE, suit) = 11
			| getCardValue (FACE face, suit) = 10
			| getCardValue (NONFACE value, suit) = value
	in
		if l = 1 then getCardValue (hd hand)
		else (
			getHandValue([(hd hand)]) + getHandValue (tl hand))
	end;

fun showHands (h1,h2) =
	let
		val playerCount = getHandValue(h1)
		
		fun showHand hand = 
			let
				val l = length hand
			in
				if l = 1 then showCard(hd hand)
				else (
				showHand([(hd hand)]);
				showHand(tl hand) )
			end;
	in
		print("Dealers Cards: \n");
		print("Hole Card\n");
		showHand(tl h2);
		
		print("\nPlayers Cards: \n");
		showHand(h1);
		print("Count: " ^ (Int.toString playerCount) ^ "\n");
	end;
	
fun dealersTurn (playersHand,dealerHand, sDeck) = 
print("Hello");

fun playerTurn (playerHand,dealerHand,sDeck) = 
	let
		val inputString = getInput "Hit(h) or Stay(s)?";
		val shuffled = shuffle(sDeck);
	in
		if inputString = "h" then playerTurn(dealCard(playerHand,(hd shuffled)), dealerHand, discard(shuffled))
		else if inputString = "s" then dealersTurn(playerHand,dealerHand, sDeck)
		else print("invalid input" ^ inputString ^ "\n"); 
	end;

fun playing w = 
	let
		val playerHand = []
		val dealerHand = []
		val shuffled = shuffle(deck);		
		val playerHand = dealCard(playerHand,(hd shuffled));
		val shuffled = shuffle(discard(shuffled));
		val dealerHand = dealCard(dealerHand,(hd shuffled));
		val shuffled = shuffle(discard(shuffled));
		val playerHand = dealCard(playerHand,(hd shuffled));
		val shuffled = shuffle(discard(shuffled));
		val dealerHand = dealCard(dealerHand,(hd shuffled));
		val shuffled = shuffle(discard(shuffled));			
	in
		showHands(playerHand,dealerHand);
		playerTurn(playerHand,dealerHand,shuffled);			
	end;
    
val startPlaying = playing "yes";
	