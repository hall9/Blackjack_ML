(*
	BLACKJACK - ALICE ML
	Written By: Alex Hall
	DATE: 04/22/2014
*)

import structure Rand from "x-alice:/lib/system/Rand";

val stdin = TextIO.stdIn
val readLine = TextIO.inputLine

(* Define the card types and the playing card object *) 
datatype face_type = KING | QUEEN | JACK;
datatype card_type = ACE | FACE of face_type | NONFACE of int;
datatype suit_type = SPADSES | HEARTS | DIAMONDS | CLUBS;
type playing_card = card_type * suit_type;

(* Define the whole deck of playing cards *)
val deck = [
(NONFACE 2,SPADSES),(NONFACE 2,HEARTS),(NONFACE 2,DIAMONDS),(NONFACE 2,CLUBS),
(NONFACE 3,SPADSES),(NONFACE 3,HEARTS),(NONFACE 3,DIAMONDS),(NONFACE 3,CLUBS),
(NONFACE 4,SPADSES),(NONFACE 4,HEARTS),(NONFACE 4,DIAMONDS),(NONFACE 4,CLUBS),
(NONFACE 5,SPADSES),(NONFACE 5,HEARTS),(NONFACE 5,DIAMONDS),(NONFACE 5,CLUBS),
(NONFACE 6,SPADSES),(NONFACE 6,HEARTS),(NONFACE 6,DIAMONDS),(NONFACE 6,CLUBS),
(NONFACE 7,SPADSES),(NONFACE 7,HEARTS),(NONFACE 7,DIAMONDS),(NONFACE 7,CLUBS),
(NONFACE 8,SPADSES),(NONFACE 8,HEARTS),(NONFACE 8,DIAMONDS),(NONFACE 8,CLUBS),
(NONFACE 9,SPADSES),(NONFACE 9,HEARTS),(NONFACE 9,DIAMONDS),(NONFACE 9,CLUBS),
(NONFACE 10,SPADSES),(NONFACE 10,HEARTS),(NONFACE 10,DIAMONDS),(NONFACE 10,CLUBS),
(FACE JACK,SPADSES),(FACE JACK,HEARTS),(FACE JACK,DIAMONDS),(FACE JACK,CLUBS),
(FACE QUEEN,SPADSES),(FACE QUEEN,HEARTS),(FACE QUEEN,DIAMONDS),(FACE QUEEN,CLUBS),
(FACE KING,SPADSES),(FACE KING,HEARTS),(FACE KING,DIAMONDS),(FACE KING,CLUBS),
(ACE,SPADSES),(ACE,HEARTS),(ACE,DIAMONDS),(ACE,CLUBS)
];

fun getInput prompt =
    let
   	 val dropEOL = Substring.dropr (fn x => x = #"\n")    
   	 val response = (print(prompt ^ ": "); readLine stdin)
   	 val sansEOL = dropEOL (Substring.full(valOf response))
    in
   	 Substring.string(sansEOL);
    end;

(* Shifts the deck a random number of times *)	
fun shuffle x =
	let
		val random = Rand.rand() mod 52;
		fun cycleList (x,n) =
		let
			fun cycle x = (tl x) @ [(hd x)]
		in
			if n = 0 then x
			else cycleList (cycle(x),(n-1))
		end;
	in
		cycleList(x,random)
	end;

(* Adds a card to the end of a hand list and returns it*)
fun dealCard (hand,card) = hand @ [card];

(* Removes the head card from the given deck list *)
fun discard d = (tl d);

(* Converts suit type to readable string *)
fun suitString suit = case suit of
    SPADSES => "Spades" |
    HEARTS => "Hearts" |
    DIAMONDS => "Diamonds" |
    CLUBS => "Clubs";

(* Prints a give card to the I/O console *)
fun showCard (ACE, suit) = print ("- ACE of " ^ suitString suit ^ "\n")
	| showCard (FACE face, suit) = (case face of
          KING => print ("- KING of " ^ suitString suit ^ "\n") |
          QUEEN => print ("- QUEEN of " ^ suitString suit ^ "\n") |
          JACK => print ("- JACK of " ^ suitString suit ^ "\n"))
        | showCard (NONFACE nfvalue, suit) = print ("- " ^ (Int.toString nfvalue) ^ " of " ^ suitString suit ^ "\n");

(* Given a hand, this function returns the hand count *)
fun getHandValue hand = 
	let
		val l = length hand
		
		(* Given a hand, returns the number of Aces within it *)
		fun hasAce (pHand) = 
			let
				fun cycle x = (tl x) @ [(hd x)];
				
				fun cycleList (x,n) =
					if n = 0 then x
					else cycleList (cycle(x),(n-1));
				
				(* Given a card, returns true if its an ACE other false *)
				fun isAce (ACE, suit) = true
					| isAce (FACE face, suit) = false
					| isAce (NONFACE value, suit) = false;
				
				(* Given a hand, Count Aces *)
				fun countAces (pHand) =
					let			
						fun countAce(pHand,ln,n) =
							if ln = 0 then n
							else if (isAce(hd pHand)) then countAce(cycle pHand,ln-1,n+1)
							else countAce(cycle pHand,ln-1,n);
					in
						countAce(pHand,l,0);
					end;
			in
				countAces(pHand);
			end;			
		
		(* Given a card, return the value of that card *)
		fun getCardValue (ACE, suit) = 11
			| getCardValue (FACE face, suit) = 10
			| getCardValue (NONFACE value, suit) = value;
		
		(* Given a hand, gets the hard count without soft Aces *)  
		fun getTotalCount (tHand) = 
			let 
				val ln = length tHand
			in
				if ln = 1 then getCardValue (hd tHand)
				else if ln > 1 then (getTotalCount([(hd tHand)]) + getTotalCount (tl tHand))
				else 0
			end;
		
		(* Given a hand and count, if hand contains ace(s) and count is above 22 softens the aces *)
		fun softAce (aceHand, count) =
			let	
				val numAce = hasAce hand;
				
				fun softenAce (count, aCount) =
					if count < 22 then count
					else (if aCount > 0 then softenAce((count-10),aCount-1)
						else count)
			in
				softenAce(count, numAce);	
			end;
	in
		softAce(hand,getTotalCount(hand));
	end;

(* Given two hands prints the current game state *)
fun showHands (h1,h2) =
	let
		val playerCount = getHandValue(h1)
		
		fun showHand hand = 
			let
				val l = length hand
			in
				if l = 1 then showCard(hd hand)
				else (
				showHand([(hd hand)]);
				showHand(tl hand) )
			end;
	in
		print("---> Player's Turn\n\n");
		print("Dealers Cards: \n");
		print("- Hole Card\n"); (* player is unable to see dealer's uncovered card *)
		showHand(tl h2);
		
		print("\nPlayers Cards: \n");
		showHand(h1);
		print("#Count: " ^ (Int.toString playerCount) ^ "\n");
	end;

(* Given both Player and Dealer hands, prints them all uncovered *)
fun showEndGame (playersHand,dealerHand,status) = 
	let 
		val playerCount = getHandValue(playersHand);
		val dealerCount = getHandValue(dealerHand);
		
		fun showHand hand = 
			let
				val l = length hand
			in
				if l = 1 then showCard(hd hand)
				else (
				showHand([(hd hand)]);
				showHand(tl hand) )
			end;
	in
		print(" ****************\n");
		print(" ** Game Ended **\n");
		print(" ****************\n");
		print("Dealers Cards: \n");
		showHand(dealerHand);
		print("#Count: " ^ (Int.toString dealerCount) ^ "\n");
		
		print("\nPlayers Cards: \n");
		showHand(playersHand);
		print("#Count: " ^ (Int.toString playerCount) ^ "\n");
		
		print(status ^ "\n");
	end;

(* Given both Player and Dealer hands, determines winner and loser based on count *)
fun endGame (playersHand,dealerHand) =
	let
		val playerCount = getHandValue(playersHand);
		val dealerCount = getHandValue(dealerHand);
	in
		if playerCount > 21 then showEndGame(playersHand,dealerHand,"BUST! You Lose!")
		else if playerCount = 21 then showEndGame(playersHand,dealerHand,"BlackJack! YOU WIN with 21!")
		else if dealerCount > 21 then showEndGame(playersHand,dealerHand,"YOU WIN, Dealer Bust.")
		else if playerCount > dealerCount then showEndGame(playersHand,dealerHand,"YOU Win! Beat the Dealer.")
		else if playerCount < dealerCount then showEndGame(playersHand,dealerHand,"YOU LOST! Dealer Beat you.")
		else showEndGame(playersHand,dealerHand,"Push (aka Tie)");
	end;

(* Given both Player and Dealer hands and current deck, dealer's turn and hits on 16 or less otherwise stays *)
fun dealersTurn (playerHand,dealerHand,sDeck) = 
	let
		val shuffled = shuffle(sDeck);
		val dealerCount = getHandValue(dealerHand);
	in
		if dealerCount < 17 then dealersTurn(playerHand,dealCard(dealerHand,(hd shuffled)),discard(shuffled))
		else endGame(playerHand,dealerHand);
	end;

(* Given both Player and Dealer hands and current deck, Player's turn and has the option to hit or stay, if bust or 21 auto ends turn *)
fun playerTurn (playerHand,dealerHand,sDeck) = 
	let
		val playerCount = getHandValue(playerHand);
		
		fun playerTurns (playerHand,dealerHand,sDeck) =
			let
				val shuffled = shuffle(sDeck);
				val inputString = getInput "Hit(h) or Stay(s)?";
				val printSomeSpace = print ("\n");
			in
				if inputString = "h" then playerTurn(dealCard(playerHand,(hd shuffled)), dealerHand, discard(shuffled))
				else if inputString = "s" then dealersTurn(playerHand,dealerHand, shuffled)
				else ( print("invalid input: " ^ inputString ^ "h - Hit, s - Stay\n"); playerTurn(playerHand,dealerHand,shuffled))
			end;
	in	
		if playerCount < 21 then (showHands(playerHand,dealerHand); playerTurns(playerHand,dealerHand,sDeck))
		else if playerCount > 21 then endGame(playerHand,dealerHand)
		else dealersTurn(playerHand,dealerHand,sDeck);
	
	end;

(* Sets up the start of a new game *)
fun playing w = 
	let		
		val playerHand = []
		val dealerHand = []
		val shuffled = shuffle(deck);		
		val playerHand = dealCard(playerHand,(hd shuffled));
		val shuffled = shuffle(discard(shuffled));
		val dealerHand = dealCard(dealerHand,(hd shuffled));
		val shuffled = shuffle(discard(shuffled));
		val playerHand = dealCard(playerHand,(hd shuffled));
		val shuffled = shuffle(discard(shuffled));
		val dealerHand = dealCard(dealerHand,(hd shuffled));
		val shuffled = shuffle(discard(shuffled));			
	in
		print(" ******************\n");
		print(" ** Game Started **\n");
		print(" ******************\n\n");
		playerTurn(playerHand,dealerHand,shuffled);		
	end;
	
(* Starts the Game *)
val startPlaying = playing "yes";